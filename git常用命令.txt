1. git checkout
git checkout xxx（分支名）： 切换至指定分支
git checkout -b xxx(分支名)：当指定分支不存在时，创建并切换至该分支

2. 将本地代码仓更新至远程代码仓
git add [file1] [file2] ...： 将本地工作空间中更新的代码文件添加至暂存区，没有指定文件名时，默认是本地工作空间中更新的所有文件
git commit [file1] [file2] ... -m <"message">: 将暂存区指定文件提交至仓库区，没有指定文件名时，默认为暂存区中的所有文件
git push <远程主机名> <本地分支名>:<远程分支名>： 将本地分支版本上传到远程指定分支，若<本地分支名>与<远程分支名>相同，可以省略冒号及后续内容

3. 将远程代码仓拷贝至本地
git clone <repos>： 其中<repos>支持url，以及ssh写法
                                  但当前目录中已有同名项目文件夹时，会拷贝失败

4.将代码退回到指定版本
4.1 使用reset回退，会删除远程分支后续所有更新版本
git log: 在本地项目文件夹运行git bash 后，利用该命令查看项目历史提交版本，并找到要退回版本的ssh，也可以在github中找到要退回版本的ssh
git reset --hard <ssh for specific commit>：将本地工作空间代码更新至指定的程序版本，但远程代码仓还没有发生变化
git push --force /-f [origin] [local branch]:将本地回退更新后的分支强制推送至远程同名分支，远程同名分支也同步回退至指定版本，且会删除远程该分支后续所有修改版本
4.2 使用revert回退
       该方式只会取消指定版本的修改内容，保留指定版本后续的修改内容，所以是回退至【指定版本】前一版本及后续修改版本，并通过新增commit的方式将回退版本添加至分支
       特别注意：
       1、revert【指定版本】是将【指定版本】修改内容回退至前一版本，当【指定版本】后续修改版本对相同文件进行了修改，revert会出现冲突
       2、冲突是因为revert会将【指定版本】修改文件回退至前一版本，同时保留后续修改内容，如果某一文件在后续版本也进行了修改，若revert将该文件恢复至【指定版本】之前，就不会保留后续修改内容，因此发生冲突
       3、冲突解决方式就是明确冲突文件的处理办法，当冲突发生时，会提示哪些文件冲突，并在冲突文件中进行标记
            <<<<<<< HEAD 后续代码代码表示【指定版本】及后续版本修改内容，需要考虑是否保留
            =======      后续代码表示【指定版本】修改前的代码部分，即要回退的状态，需要考虑是否保留（一般需要保留）
            >>>>>>>      后续名称表示【指定版本】修改前的ssh名称
            手动处理完成后，需要把冲突标记删除，然后保存文件
            最后将全部手动处理完成的文件通过add、commit、push进行提交完成
git log: 在本地项目文件夹运行git bash 后，利用该命令查看项目历史提交版本，并找到要退回版本的ssh，也可以在github中找到要退回版本的ssh
git revert <ssh for specific commit>：取消指定版本的修改内容，将本地工作空间代码更新，并保留指定版本后续修改内容
若未出现冲突：
在自动弹出的commit编辑器中完成提交提示内容
git push <远程主机名> <本地分支名>:<远程分支名>：将本地回退更新的版本上传至远程指定分支，添加新的commit，若<本地分支名>与<远程分支名>相同，可以省略冒号及后续内容
若出现冲突：
针对冲突文件，进行手动冲突修改处理
git add [file1] [file2] ...
git commit [file1] [file2] ... -m <"message">
git push <远程主机名> <本地分支名>:<远程分支名>

5.将远程代码仓更新至本地代码仓
5.1 pull
5.2 fetch + merge
